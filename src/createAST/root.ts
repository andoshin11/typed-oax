import * as ts from 'typescript'

export const createRootAST = (operations: ts.TypeElement[], models: ts.Statement[]) => {
  return [
    ts.createImportDeclaration(
      undefined,
      undefined,
      ts.createImportClause(
        undefined,
        ts.createNamedImports([ts.createImportSpecifier(
          undefined,
          ts.createIdentifier("RequestHandler")
        )]),
        false
      ),
      ts.createStringLiteral("express")
    ),
    ts.createModuleDeclaration(
      undefined,
      [ts.createModifier(ts.SyntaxKind.DeclareKeyword)],
      ts.createStringLiteral("express-serve-static-core"),
      ts.createModuleBlock([
        ...models,
        // type _ResBody<M extends 'all' | 'get' | 'post' | 'put' | 'delete' | 'patch' | 'options' | 'head' = any, GetRes = any, PostRes = any, PutRes = any, DeleteRes = any, PatchRes = any> = 'get' extends M ? GetRes : 'post' extends M ? PostRes : 'put' extends M ? PutRes : 'delete' extends M ? DeleteRes : 'patch' extends M ? PatchRes : any
        ts.createTypeAliasDeclaration(
          undefined,
          undefined,
          ts.createIdentifier("_ResBody"),
          [
            ts.createTypeParameterDeclaration(
              ts.createIdentifier("M"),
              ts.createUnionTypeNode([
                ts.createLiteralTypeNode(ts.createStringLiteral("all")),
                ts.createLiteralTypeNode(ts.createStringLiteral("get")),
                ts.createLiteralTypeNode(ts.createStringLiteral("post")),
                ts.createLiteralTypeNode(ts.createStringLiteral("put")),
                ts.createLiteralTypeNode(ts.createStringLiteral("delete")),
                ts.createLiteralTypeNode(ts.createStringLiteral("patch")),
                ts.createLiteralTypeNode(ts.createStringLiteral("options")),
                ts.createLiteralTypeNode(ts.createStringLiteral("head"))
              ]),
              ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            ),
            ts.createTypeParameterDeclaration(
              ts.createIdentifier("GetRes"),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            ),
            ts.createTypeParameterDeclaration(
              ts.createIdentifier("PostRes"),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            ),
            ts.createTypeParameterDeclaration(
              ts.createIdentifier("PutRes"),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            ),
            ts.createTypeParameterDeclaration(
              ts.createIdentifier("DeleteRes"),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            ),
            ts.createTypeParameterDeclaration(
              ts.createIdentifier("PatchRes"),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            )
          ],
          ts.createConditionalTypeNode(
            ts.createLiteralTypeNode(ts.createStringLiteral("get")),
            ts.createTypeReferenceNode(
              ts.createIdentifier("M"),
              undefined
            ),
            ts.createTypeReferenceNode(
              ts.createIdentifier("GetRes"),
              undefined
            ),
            ts.createConditionalTypeNode(
              ts.createLiteralTypeNode(ts.createStringLiteral("post")),
              ts.createTypeReferenceNode(
                ts.createIdentifier("M"),
                undefined
              ),
              ts.createTypeReferenceNode(
                ts.createIdentifier("PostRes"),
                undefined
              ),
              ts.createConditionalTypeNode(
                ts.createLiteralTypeNode(ts.createStringLiteral("put")),
                ts.createTypeReferenceNode(
                  ts.createIdentifier("M"),
                  undefined
                ),
                ts.createTypeReferenceNode(
                  ts.createIdentifier("PutRes"),
                  undefined
                ),
                ts.createConditionalTypeNode(
                  ts.createLiteralTypeNode(ts.createStringLiteral("delete")),
                  ts.createTypeReferenceNode(
                    ts.createIdentifier("M"),
                    undefined
                  ),
                  ts.createTypeReferenceNode(
                    ts.createIdentifier("DeleteRes"),
                    undefined
                  ),
                  ts.createConditionalTypeNode(
                    ts.createLiteralTypeNode(ts.createStringLiteral("patch")),
                    ts.createTypeReferenceNode(
                      ts.createIdentifier("M"),
                      undefined
                    ),
                    ts.createTypeReferenceNode(
                      ts.createIdentifier("PatchRes"),
                      undefined
                    ),
                    ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                  )
                )
              )
            )
          )
        ),
        ts.createInterfaceDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier("IRouterMatcher"),
        [
          ts.createTypeParameterDeclaration(
            ts.createIdentifier("T"),
            undefined,
            undefined
          ),
          ts.createTypeParameterDeclaration(
            ts.createIdentifier("Method"),
            ts.createUnionTypeNode([
              ts.createLiteralTypeNode(ts.createStringLiteral("all")),
              ts.createLiteralTypeNode(ts.createStringLiteral("get")),
              ts.createLiteralTypeNode(ts.createStringLiteral("post")),
              ts.createLiteralTypeNode(ts.createStringLiteral("put")),
              ts.createLiteralTypeNode(ts.createStringLiteral("delete")),
              ts.createLiteralTypeNode(ts.createStringLiteral("patch")),
              ts.createLiteralTypeNode(ts.createStringLiteral("options")),
              ts.createLiteralTypeNode(ts.createStringLiteral("head"))
            ]),
            ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
          )
        ],
        undefined,
        operations
      )]),
      ts.NodeFlags.ContextFlags
    )
  ]
}
