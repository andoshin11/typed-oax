openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json: 
              schema:
                type: object
                required:
                  - pets
                properties:
                  pets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - sex
              properties:
                name:
                  type: string
                category:
                  type: integer
                  format: int32
                  enum:
                    - 1
                    - 2
                    - 3
                sex:
                  type: string
                  enum:
                    - male
                    - female
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - pet
                properties:
                  pet:
                    $ref: "#/components/schemas/Pet"
        '422':
          description: Invalid parameters
          content:
            application/json:
              schema:
                type: object
                required:
                  - reason
                properties:
                  reason:
                    type: string
                    example: 'Invalid name given.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                required:
                  - pet
                properties:
                  pet:
                    $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
    put:
      operationId: UpdatePet
      tags:
        - pets    
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                category:
                  type: integer
                  format: int32
                  enum:
                    - 1
                    - 2
                    - 3
                sex:
                  type: string
                  enum:
                    - male
                    - female
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - pet
                properties:
                  pet:
                    $ref: "#/components/schemas/Pet"      
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          type: integer
          format: int32
          enum:
            - 1
            - 2
            - 3
        tag:
          type: string
        sex:
          type: string
          enum:
            - male
            - female
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string